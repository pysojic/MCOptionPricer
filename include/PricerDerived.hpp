// PricerDerived.hpp
// 
// Pricers used to calculate the price of an option based on the paths generated by the simulation
// Currently supports European, Barrier and Asian options
// 
// Pierre-Yves Sojic
//

#pragma once

#include <vector>

#include "PricerAbstract.hpp"
#include "Interface.hpp"

//--------------European Option-----------------

class EuropeanPricer : public PricerAbstract
{
public:
    EuropeanPricer(const PayoffFunc& callpayoff, const PayoffFunc& putpayoff, const DiscounterFunc& discounter, std::size_t nSim);

    void process_path(const std::vector<double>& path) override;
    void post_process(double duration) override;
};

//--------------Asian Option-----------------

class AsianPricer : public PricerAbstract
{ // e.g. arithmetic Asian average of the asset price taken on a set of observations (fixings) of the asset price
public:
    AsianPricer(const PayoffFunc& callpayoff, const PayoffFunc& putpayoff, const DiscounterFunc& discounter, std::size_t nSim);

    void process_path(const std::vector<double>& path) override;
    void post_process(double duration) override;

private:
    double Average(const std::vector<double>& path);
    double GeometricAverage(const std::vector<double>& path);
    double Max(const std::vector<double>& path);

private:
    double m_geom_callSum;
    double m_geom_putSum;
    double m_geom_callPrice;
    double m_geom_putPrice;
};

//--------------Barrier Option-----------------

class BarrierPricer : public PricerAbstract
{
public:
    enum class BarrierType
    {
        Up_and_In = 1,
        Up_and_Out,
        Down_and_In,
        Down_and_Out
    };

public:
    BarrierPricer(const PayoffFunc& callpayoff, const PayoffFunc& putpayoff, const DiscounterFunc& discounter, std::size_t nSim);

    void process_path(const std::vector<double>& path) override;
    void post_process(double duration) override;
    void set_barrier_type(BarrierType barrierType);
    void set_barrier_amount(double barrierAmount);

private:
    BarrierType m_barrierType; // Type of barrier options
    double m_barrierAmount;    // The dollar amount of the barrier
};
